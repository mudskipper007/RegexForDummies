{name:"session 2", layoutItems: [
                {header:"Tests", sessionIndex:"2",
                subHeader:'To write an regular expression to pass the following cases',
                vModel:"Match yyyyess \nMatch yyeeees \nMatch yyss \nSkip y"},
                {header:"Editable Code Block",
                subHeader:'Please write your regex here',
                vModel:"y{2,4}[es]{1,5}"},
                {header:"Introduction", subHeader:'',
                vModel:"Weâ€™ve so far learned how to match a set of specific characters, but what if we want to match a specific number of repetitions of characters? Say, if we want to pick ooops out of ops and oops. Instead of hardcoding three os, a simple way is to use curly braces notation like o{3}, which will match the word with exactly three os. And if you put o{1,3}, you will find words with no less than one o and no more than three o. This quantifier can be used with any character, or special metacharacters, for example w{3} (three w's), [wxy]{5} (five characters, each of which can be a w, x, or y) and .{2,6} (between two and six of any character) \nIf you wish to match an arbitrary number of characters, you can make use of the Kleene Star and the Kleene Plus. For example, to match the donations above, we can use the pattern \d* to match any number of digits, but a tighter regular expression would be \d+ which ensures that the input string has at least one digit. These quantifiers can be used with any character or special metacharacters, for example a+ (one or more a's), [abc]+ (one or more of any a, b, or c character) and .* (zero or more of any character) "}
                ], status:" ðŸ”´"}